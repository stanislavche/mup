{"version":3,"sources":["components/MupCanvas.js","audio/promise.mp3","App.js","index.js"],"names":["analyser","canvas","ctx","frequencyArray","audio","Audio","MupCanvas","canvasRef","useRef","requestRef","initAudio","src","track1","crossOrigin","load","context","window","AudioContext","webkitAudioContext","createAnalyser","createMediaElementSource","connect","destination","Uint8Array","frequencyBinCount","console","log","play","drawCanvas","current","clearRect","width","height","getByteFrequencyData","centerY","i","length","drawLine","requestAnimationFrame","beginPath","strokeStyle","moveTo","lineTo","stroke","drawStar","fillStyle","fillRect","onClick","paused","getContext","lineWidth","lineCap","Math","round","pause","ref","style","background","innerWidth","innerHeight","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKAIIA,EACAC,EACAC,E,gCCNW,G,gBAAA,IAA0B,qC,ODGrCC,EAAiB,GAKfC,EAAQ,IAAIC,MA2FHC,EAzFG,WACd,IAAMC,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAqBpBE,EAAY,WACdN,EAAMO,IAAMC,EACZR,EAAMS,YAAc,YACpBT,EAAMU,OAEN,IAAMC,EAAU,IAAKC,OAAOC,cAAgBD,OAAOE,oBACnDlB,EAAWe,EAAQI,iBACJJ,EAAQK,yBAAyBhB,GAEzCiB,QAAQrB,GACfA,EAASqB,QAAQN,EAAQO,aAEzBnB,EAAiB,IAAIoB,WAAWvB,EAASwB,mBACzCC,QAAQC,IAAIvB,GACZC,EAAMuB,QAIJC,EAAa,SAAbA,IACF,GAAIrB,EAAUsB,QAAS,CACnB3B,EAAI4B,UAAU,EAAG,EAAG7B,EAAO8B,MAAO9B,EAAO+B,QACzChC,EAASiC,qBAAqB9B,GAG9B,IADA,IAAM+B,EAAUjC,EAAO+B,OAAS,EACvBG,EAAI,EAAGA,EAAIhC,EAAeiC,OAAQD,IAAK,CAC5C,IAAMH,EAAS7B,EAAegC,GAC1BH,EAAS,GAAGK,EAAa,EAAJF,EAAOH,EAAQE,EAAShC,GAGrDO,EAAWoB,QAAUS,sBAAsBV,KAK7CS,EAAW,SAACF,EAAGH,EAAQE,EAAShC,GAClCA,EAAIqC,YACJrC,EAAIsC,YAAc,UAClBtC,EAAIuC,OAAON,EAAGD,EAAWF,EAAO,GAChC9B,EAAIwC,OAAOP,EAAGD,EAAWF,EAAO,GAChC9B,EAAIyC,SAEAX,EAAS,KACVY,EAAST,EAAGH,EAAQE,EAAShC,IAI9B0C,EAAW,SAACT,EAAGH,EAAQE,EAAShC,GAClCA,EAAI2C,UAAY,UAChB3C,EAAI4C,SAASX,EAAGD,EAAUF,EAAS,GAAI,EAAG,GAC1C9B,EAAI4C,SAASX,EAAGD,EAAUF,EAAS,GAAI,EAAG,IAI9C,OACI,qCACI,wBAAQe,QA1EG,WACV3C,EAAM4C,OAGH5C,EAAMO,KAAOP,EAAMO,IAAIyB,OACvBhC,EAAMuB,QAENjB,IACAT,EAASM,EAAUsB,SACnB3B,EAAMD,EAAOgD,WAAW,OACpBC,UAAY,EAChBhD,EAAIiD,QAAU,OACPC,KAAKC,MAAMpD,EAAO8B,OACzBtB,EAAWoB,QAAUS,sBAAsBV,IAX/CxB,EAAMkD,SAwEN,mBACA,wBACIC,IAAKhD,EACLiD,MAAO,CAAEC,WAAY,WACrB1B,MAAOf,OAAO0C,WACd1B,OAAQhB,OAAO2C,kBEjFhBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,OCFRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.32ef5e08.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport track1 from '../audio/promise.mp3';\r\n\r\nlet frequencyArray = [];\r\nlet analyser;\r\nlet canvas;\r\nlet ctx;\r\nlet bars;\r\nconst audio = new Audio();\r\n\r\nconst MupCanvas = () => {\r\n    const canvasRef = useRef(null);\r\n    const requestRef = useRef(null);\r\n\r\n    const handleInit = () => {\r\n        if (!audio.paused) {\r\n            audio.pause();\r\n        } else {\r\n            if (audio.src && audio.src.length) {\r\n                audio.play();\r\n            } else {\r\n                initAudio();\r\n                canvas = canvasRef.current;\r\n                ctx = canvas.getContext(\"2d\");\r\n                ctx.lineWidth = 2;\r\n                ctx.lineCap = \"butt\";\r\n                bars = Math.round(canvas.width);\r\n                requestRef.current = requestAnimationFrame(drawCanvas);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    const initAudio = () => {\r\n        audio.src = track1;\r\n        audio.crossOrigin = \"anonymous\";\r\n        audio.load();\r\n\r\n        const context = new (window.AudioContext || window.webkitAudioContext)();\r\n        analyser = context.createAnalyser();\r\n        const source = context.createMediaElementSource(audio);\r\n\r\n        source.connect(analyser);\r\n        analyser.connect(context.destination);\r\n\r\n        frequencyArray = new Uint8Array(analyser.frequencyBinCount);\r\n        console.log(frequencyArray);\r\n        audio.play();\r\n    };\r\n\r\n    // draw the whole thing\r\n    const drawCanvas = () => {\r\n        if (canvasRef.current) {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            analyser.getByteFrequencyData(frequencyArray);\r\n\r\n            const centerY = canvas.height / 2;\r\n            for (var i = 0; i < frequencyArray.length; i++) {\r\n                const height = frequencyArray[i];\r\n                if (height > 0) drawLine(i * 2, height, centerY, ctx);\r\n            }\r\n\r\n            requestRef.current = requestAnimationFrame(drawCanvas);\r\n        }\r\n    };\r\n\r\n    // dray lines around the circle\r\n    const drawLine = (i, height, centerY, ctx) => {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#dff8d0';\r\n        ctx.moveTo(i, centerY - (height/2));\r\n        ctx.lineTo(i, centerY + (height/2));\r\n        ctx.stroke();\r\n\r\n        if (height > 150) {\r\n           drawStar(i, height, centerY, ctx);\r\n        }\r\n    };\r\n\r\n    const drawStar = (i, height, centerY, ctx) => {\r\n        ctx.fillStyle = '#86c06c';\r\n        ctx.fillRect(i, centerY - height - 30, 2, 2);\r\n        ctx.fillRect(i, centerY + height + 30, 2, 2);\r\n        //console.log(i, height);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button onClick={handleInit}>Start</button>\r\n            <canvas\r\n                ref={canvasRef}\r\n                style={{ background: \"#071820\" }}\r\n                width={window.innerWidth}\r\n                height={window.innerHeight}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MupCanvas;\r\n","export default __webpack_public_path__ + \"static/media/promise.06f37e67.mp3\";","import './App.css';\nimport './scss-variables.scss';\nimport MupCanvas from \"./components/MupCanvas\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MupCanvas />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}