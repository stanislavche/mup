{"version":3,"sources":["components/MupCanvas.js","audio/promise.mp3","image/boy.svg","App.js","index.js"],"names":["analyser","canvas","ctx","isPlaying","timeout","frequencyArray","audio","Audio","image","Image","MupCanvas","canvasRef","useRef","requestRef","canvasRef2","initImage","src","boy","initAudio","addEventListener","pauseEvent","playEvent","track1","crossOrigin","load","audioContext","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","createMediaElementSource","connect","destination","Uint8Array","frequencyBinCount","play","setTimeout","clearTimeout","current","getContext","updateVisualization","clearRect","width","height","save","translate","innerWidth","innerHeight","drawImage","getByteFrequencyData","bass","Math","floor","radius","i","length","position","fillStyle","fillRect","rotate","PI","restore","drawCanvas","requestAnimationFrame","onClick","paused","pause","ref","style","background","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKAKIA,EACAC,EACAC,EACAC,EACAC,E,gCCTW,G,gBAAA,IAA0B,qCCA1B,MAA0B,gC,OFIrCC,EAAiB,GAMfC,EAAQ,IAAIC,MACZC,EAAQ,IAAIC,MA8HHC,EA1HG,WACd,IAAMC,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MACpBE,EAAaF,iBAAO,MAgBpBG,EAAY,WACdP,EAAMQ,IAAMC,GASVC,EAAY,WACdZ,EAAMa,iBAAiB,QAASC,GAChCd,EAAMa,iBAAiB,OAAQE,GAC/Bf,EAAMU,IAAMM,EACZhB,EAAMiB,YAAc,YACpBjB,EAAMkB,OACN,IAAMC,EAAe,IAAKC,OAAOC,cAAgBD,OAAOE,qBACxD5B,EAAWyB,EAAaI,kBACfC,QAAU,IACJL,EAAaM,yBAAyBzB,GAC9C0B,QAAQhC,GACfA,EAASgC,QAAQP,EAAaQ,aAC9B5B,EAAiB,IAAI6B,WAAWlC,EAASmC,mBACzC7B,EAAM8B,QAGJhB,EAAa,WACfhB,EAAUiC,YAAW,WACjBlC,GAAY,IACd,MAEAkB,EAAY,WACdiB,aAAalC,GACbD,GAAY,EA5BZF,EAASU,EAAU4B,QACnBrC,EAAMD,EAAOuC,WAAW,MACxBC,KAyDJ,SAASA,IACDtC,GACIQ,EAAU4B,UACVrC,EAAIwC,UAAU,EAAG,EAAGzC,EAAO0C,MAAO1C,EAAO2C,QACzC1C,EAAI2C,OAEJ3C,EAAI4C,UAAUpB,OAAOqB,WAAa,EAAGrB,OAAOsB,YAAc,GAC1DC,IAhCO,WACf,GAAItC,EAAU4B,QAAS,CACnBvC,EAASkD,qBAAqB7C,GAG9B,IAFA,IAAI8C,EAAOC,KAAKC,MAAMhD,EAAe,IACjCiD,EAAS,IAAOrD,EAAO0C,OAAS,MAAe,IAAPQ,EAAc,IAAOlD,EAAO0C,SAAkB,IAAPQ,EAAc,KACxFI,EAAI,EAAGA,EAAIlD,EAAemD,OAAQD,IAAK,CAC5C,IAAME,EAAWpD,EAAekD,GAC5BA,EAAI,IACJrD,EAAIwD,UAAY,UAChBxD,EAAIyD,SAAS,EAAGL,EAAQ,GAAIG,EAAS,GACrCvD,EAAI0D,OAAQ,QAAaR,KAAKS,GAAK,MAG3C,IAAK,IAAIN,EAAI,EAAGA,EAAIlD,EAAemD,OAAQD,IAAK,CAC5C,IAAME,EAAWpD,EAAekD,GAC5BA,EAAI,IACJrD,EAAIwD,UAAY,UAChBxD,EAAIyD,SAAS,EAAGL,EAAQ,GAAIG,EAAS,GACrCvD,EAAI0D,QAAQ,QAAcR,KAAKS,GAAK,MAG5C3D,EAAI4D,WAYAC,GAEAlD,EAAW0B,QAAUyB,sBAAsBvB,IAKvD,IAAMQ,EAAY,WACd/C,EAAI+C,UAAUzC,GAAQ,KAAM,IAAK,IAAK,MAG1C,OACI,qCACI,wBAAQyD,QAnGG,WACV3D,EAAM4D,OAGH5D,EAAMU,KAAOV,EAAMU,IAAIwC,OACvBlD,EAAM8B,QAENrB,IACAG,KANJZ,EAAM6D,SAiGN,mBACA,wBACIC,IAAKtD,EACLuD,MAAO,CAAEC,WAAY,WACrB3B,MAAOjB,OAAOqB,WACdH,OAAQlB,OAAOsB,cAEnB,wBACIoB,IAAKzD,EACL0D,MAAO,CAAEC,WAAY,eACrB3B,MAAOjB,OAAOqB,WACdH,OAAQlB,OAAOsB,kBGtHhBuB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,OCFRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.527a59e1.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport track1 from '../audio/promise.mp3';\r\nimport boy from '../image/boy.svg';\r\n\r\nlet frequencyArray = [],\r\n    analyser,\r\n    canvas,\r\n    ctx,\r\n    isPlaying,\r\n    timeout;\r\nconst audio = new Audio();\r\nconst image = new Image();\r\n\r\n\r\n\r\nconst MupCanvas = () => {\r\n    const canvasRef = useRef(null);\r\n    const requestRef = useRef(null);\r\n    const canvasRef2 = useRef(null);\r\n\r\n    const handleInit = () => {\r\n        if (!audio.paused) {\r\n            audio.pause();\r\n        } else {\r\n            if (audio.src && audio.src.length) {\r\n                audio.play();\r\n            } else {\r\n                initImage();\r\n                initAudio();\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    const initImage = () => {\r\n        image.src = boy;\r\n    }\r\n\r\n    const initCanvas = () => {\r\n        canvas = canvasRef.current;\r\n        ctx = canvas.getContext(\"2d\");\r\n        updateVisualization();\r\n    };\r\n\r\n    const initAudio = () => {\r\n        audio.addEventListener(\"pause\", pauseEvent);\r\n        audio.addEventListener(\"play\", playEvent);\r\n        audio.src = track1;\r\n        audio.crossOrigin = \"anonymous\";\r\n        audio.load();\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        analyser = audioContext.createAnalyser();\r\n        analyser.fftSize = 512;\r\n        const source = audioContext.createMediaElementSource(audio);\r\n        source.connect(analyser);\r\n        analyser.connect(audioContext.destination);\r\n        frequencyArray = new Uint8Array(analyser.frequencyBinCount);\r\n        audio.play();\r\n    };\r\n\r\n    const pauseEvent = () => {\r\n        timeout = setTimeout(()=>{\r\n            isPlaying = false;\r\n        },2000);\r\n    }\r\n    const playEvent = () => {\r\n        clearTimeout(timeout);\r\n        isPlaying = true;\r\n        initCanvas();\r\n\r\n    }\r\n\r\n    // draw the whole thing\r\n    const drawCanvas = () => {\r\n        if (canvasRef.current) {\r\n            analyser.getByteFrequencyData(frequencyArray);\r\n            let bass = Math.floor(frequencyArray[1]); //1Hz Frequenz\r\n            let radius = 0.45 * canvas.width <= 450 ? -(bass * 0.25 + 0.45 * canvas.width) : -(bass * 0.25 + 100);\r\n            for (let i = 0; i < frequencyArray.length; i++) {\r\n                const position = frequencyArray[i];\r\n                if (i > 0) {\r\n                    ctx.fillStyle = '#86c06c';\r\n                    ctx.fillRect(0, radius, 3, -position/2);\r\n                    ctx.rotate((180 / 128) * Math.PI / 180);\r\n                }\r\n            }\r\n            for (let i = 0; i < frequencyArray.length; i++) {\r\n                const position = frequencyArray[i];\r\n                if (i > 0) {\r\n                    ctx.fillStyle = '#316851';\r\n                    ctx.fillRect(0, radius, 3, -position/2);\r\n                    ctx.rotate(-(180 / 128) * Math.PI / 180);\r\n                }\r\n            }\r\n            ctx.restore();\r\n        }\r\n    };\r\n\r\n    function updateVisualization () {\r\n        if (isPlaying) {\r\n            if (canvasRef.current) {\r\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                ctx.save();\r\n                //ctx.globalCompositeOperation = 'color-dodge';\r\n                ctx.translate(window.innerWidth / 2, window.innerHeight / 2);\r\n                drawImage();\r\n                drawCanvas();\r\n\r\n                requestRef.current = requestAnimationFrame(updateVisualization);\r\n            }\r\n        }\r\n    };\r\n\r\n    const drawImage = () => {\r\n        ctx.drawImage(image, -112, -140, 240, 240);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button onClick={handleInit}>Start</button>\r\n            <canvas\r\n                ref={canvasRef2}\r\n                style={{ background: \"#071820\" }}\r\n                width={window.innerWidth}\r\n                height={window.innerHeight}\r\n            />\r\n            <canvas\r\n                ref={canvasRef}\r\n                style={{ background: \"transparent\" }}\r\n                width={window.innerWidth}\r\n                height={window.innerHeight}\r\n            />\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MupCanvas;\r\n","export default __webpack_public_path__ + \"static/media/promise.06f37e67.mp3\";","export default __webpack_public_path__ + \"static/media/boy.09e91660.svg\";","import './App.css';\r\nimport './scss-variables.scss';\r\nimport MupCanvas from \"./components/MupCanvas\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <MupCanvas />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}